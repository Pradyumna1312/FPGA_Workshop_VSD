/home/kunalg123/Desktop/OpenFPGA/yosys/install/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10.0 (git sha1 dca8fb54a, gcc 7.5.0-3ubuntu1~18.04 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/counter.v
Parsing Verilog input from `./benchmark/counter.v' to AST representation.
Generating RTLIL representation for module `\counter'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \counter

2.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./benchmark/counter.v:8$1 in module counter.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter.$proc$./benchmark/counter.v:8$1'.
     1/1: $0\q[7:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter.\q' using process `\counter.$proc$./benchmark/counter.v:8$1'.
  created $dff cell `$procdff$6' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\counter.$proc$./benchmark/counter.v:8$1'.
Removing empty process `counter.$proc$./benchmark/counter.v:8$1'.
Cleaned up 1 empty switch.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend: /home/kunalg123/Desktop/OpenFPGA/yosys/install/bin/../share/yosys/adff2dff.v
Parsing Verilog input from `/home/kunalg123/Desktop/OpenFPGA/yosys/install/bin/../share/yosys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

4.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

5. Executing FLATTEN pass (flatten design).

6. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

8. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing FSM pass (extract and optimize FSM).

10.1. Executing FSM_DETECT pass (finding FSMs in design).

10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell counter.$add$./benchmark/counter.v:13$2 ($add).
Removed top 24 bits (of 32) from port Y of cell counter.$add$./benchmark/counter.v:13$2 ($add).
Removed top 24 bits (of 32) from wire counter.$add$./benchmark/counter.v:13$2_Y.

13. Executing PEEPOPT pass (run peephole optimizers).

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

15. Executing OPT pass (performing simple optimizations).

15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

15.6. Executing OPT_DFF pass (perform DFF optimizations).

15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

15.9. Finished OPT passes. (There is nothing left to do.)

16. Executing MEMORY pass.

16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

16.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

16.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

16.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

16.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

16.9. Executing MEMORY_COLLECT pass (generating $mem cells).

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

18.3. Executing OPT_DFF pass (perform DFF optimizations).

18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

18.5. Finished fast OPT passes.

19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

20. Executing OPT pass (performing simple optimizations).

20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

20.6. Executing OPT_SHARE pass.

20.7. Executing OPT_DFF pass (perform DFF optimizations).

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

20.10. Finished OPT passes. (There is nothing left to do.)

21. Executing TECHMAP pass (map to technology primitives).

21.1. Executing Verilog-2005 frontend: /home/kunalg123/Desktop/OpenFPGA/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/kunalg123/Desktop/OpenFPGA/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

21.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~249 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~43 debug messages>

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

22.3. Executing OPT_DFF pass (perform DFF optimizations).

22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 10 unused cells and 47 unused wires.
<suppressed ~11 debug messages>

22.5. Finished fast OPT passes.

23. Executing ABC pass (technology mapping using ABC).

23.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 34 wires to a netlist network with 9 inputs and 8 outputs.

23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

23.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       12
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        8
Removing temp directory.

24. Executing SYNTH pass.

24.1. Executing HIERARCHY pass (managing design hierarchy).

24.1.1. Analyzing design hierarchy..
Top module:  \counter

24.1.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.

24.2. Printing statistics.

=== counter ===

   Number of wires:                 30
   Number of wire bits:             65
   Number of public wires:           3
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     $_DFF_P_                        8
     $lut                           12

24.3. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

26. Executing BLIF backend.

End of script. Logfile hash: f17b393ec2, CPU: user 0.09s system 0.00s, MEM: 14.10 MB peak
Yosys 0.10.0 (git sha1 dca8fb54a, gcc 7.5.0-3ubuntu1~18.04 -fPIC -Os)
Time spent: 56% 1x abc (0 sec), 9% 14x opt_expr (0 sec), ...
0